#!/bin/bash

exec 2>&1
set -euo pipefail
IFS=$'\n\t'
BZR=''
GIT=''
SSH=''

eval set -- "$(getopt -o h -l "help,bzr,git,ssh:" -- "$@")"

while :; do
    case "$1" in
        ('-h'|'--help')
            cat <<ENDLINE
Usage:
    $0 [Options] [PPA] [FILE] ...
Options:
    --help            The manual of this script
    --bzr             Install bzr and config bzr
    --git             Install git and config git
    --ssh ~/.ssh/id_* Specify SSH private key and config ssh
Example:
    $ $0 ppa:oem-solutions-group/ppa ~/.config/oem-scripts/config.ini --ssh ~/.ssh/id_ecdsa > auto-provision.sh && chmod +x auto-provision.sh
ENDLINE
            exit;;
        ('--bzr')
            BZR="yes"
            shift;;
        ('--git')
            GIT="yes"
            shift;;
        ('--ssh')
            SSH="$2"
            shift 2;;
        ('--')
            shift
            break;;
    esac
done

# shellcheck source=config.sh
source /usr/share/oem-scripts/config.sh 2>/dev/null || source config.sh

# Get the path of autopkgtest-collect-credentials, it's same path with launchpad-api
cur_dir=$(cd "$(dirname "$0")" || exit; pwd)

if ! valid_oem_scripts_config; then
    echo "Please execute \`launchpad-api\` to get the token for Launchpad API first."
    exit 1
fi

PPA_LIST=()
FILE_LIST=()

if [ -n "$SSH" ]; then
    FILE_LIST+=("${SSH/$HOME\//}")
fi

for arg in "$@"; do
    case "$arg" in
        ("ppa:"*)
            PPA_LIST+=("$arg")
            ;;
        (*)
            FILE_LIST+=("${arg/$HOME\//}")
            ;;
    esac
done

username=$(launchpad-api get devel/people/+me | jq -r .name)
display_name=$(launchpad-api get devel/people/+me | jq -r .display_name)
email=$(launchpad-api get devel/people/+me | jq -r .preferred_email_address_link | sed 's/.*\///')

get_private_ppa="${cur_dir}/get-private-ppa"

PPA=()
while read -r line; do
    PPA+=("$line")
done < <(${get_private_ppa} "${PPA_LIST[@]}")


IFS="|"

cat <<ENDLINE
#!/bin/sh

export LC_ALL=C.UTF-8
export LANG=C.UTF-8
export LANGUAGE=C:

set -eu

# Created files should be readable by user (this script is called as root)
umask 0022

# avoid debconf hangs
export DEBIAN_FRONTEND=noninteractive

root=\${1:-/}

install_pkgs ()
{
    for pkg in "\$@"; do
        if ! chroot "\$root" dpkg-query -W -f="\\\${Status}\n" "\$pkg" | grep "install ok installed"; then
            chroot "\$root" apt-get install "\$pkg" --yes
        fi
    done
}

install_pkgs gpg apt-transport-https

create_source_list ()
{
    echo "\$*" | tr "|" "\n" | while read -r line; do
        NAME=\$(echo "\$line" | awk '{print \$1}')
        URL=\$(echo "\$line" | awk '{print \$2}')
        KEY=\$(echo "\$line" | awk '{print \$3}')
        chroot "\$root" apt-key adv --keyserver keyserver.ubuntu.com --recv-key "\$KEY"
        echo "deb \$URL \$(chroot "\$root" lsb_release -cs) main" > "\$root/etc/apt/sources.list.d/\$NAME-\$(chroot "\$root" lsb_release -cs).list"
        echo "# deb-src \$URL \$(chroot "\$root" lsb_release -cs) main" >> "\$root/etc/apt/sources.list.d/\$NAME-\$(chroot "\$root" lsb_release -cs).list"
    done
}

create_source_list "${PPA[*]}"

user=\$(grep 1000:1000 "\$root/etc/passwd" | awk -F: '{print \$1}')
HOME="/home/\$user"
cat >> "\$root\$HOME/.profile" <<END
export DEBFULLNAME="$display_name"
export DEBEMAIL="$email"
END
ENDLINE

for FILE in "${FILE_LIST[@]}"; do
    if [ -f "$HOME/$FILE" ]; then
    cat <<ENDLINE
mkdir -p "\$root\$HOME/$(dirname "$FILE")/"
cat > "\$root\$HOME/$FILE" <<END
$(sed "s/home\/[^\/]*/home\/\$user/g" < "$HOME/$FILE")
END
ENDLINE
    else
        echo "There is no $HOME/$FILE."
        exit 1
    fi
done

if [ -n "$SSH" ]; then
    cat <<ENDLINE
chroot "\$root" chmod 600 "\$HOME/${SSH/$HOME\//}"
cat >> "\$root\$HOME/.ssh/config" <<END
Host *
  StrictHostKeyChecking no
END
ENDLINE
fi

cat <<ENDLINE
chroot "\$root" apt-get update
chroot "\$root" chown 1000.1000 -R "\$HOME"
ENDLINE

if [ -n "$BZR" ]; then
    cat <<ENDLINE
install_pkgs bzr
chroot "\$root" su - "\$user" -c 'bzr launchpad-login $username'
chroot "\$root" su - "\$user" -c 'bzr whoami "$display_name ($email)"'
ENDLINE
fi

if [ -n "$GIT" ]; then
    cat <<ENDLINE
install_pkgs git
chroot "\$root" su - "\$user" -c 'git config --global user.name "$display_name"'
chroot "\$root" su - "\$user" -c 'git config --global user.email "$email"'
ENDLINE
fi
