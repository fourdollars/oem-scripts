#!/usr/bin/env python
# author: hychen <hychen@canonical.com>
#
# Run self test: $ DEBUG=true oem-getiso
import os
import copy
import glob
import logging
import subprocess
import sys
from optparse import OptionParser

__DEBUG__ = (os.getenv('DEBUG') == 'true')


class ImageURI(object):

    def __init__(self,  project, date, buildorder):
        self.project = project
        self.date = date
        self.buildorder = str(buildorder)
        self.manifest_ver = None

        # default value
        self.siteurl = 'https://oem-share.canonical.com'
        self.ispublished = False

    @property
    def rootdir(self):
        self._rootdir = self.ispublished and '/partners' or '/oem/cesg-builds/'
        return self._rootdir

    @property
    def isolink(self):
        """
        >>> ImageURI('somerville-oneiric-amd64', '20111115', 1).isolink
        'https://oem-share.canonical.com/oem/cesg-builds/somerville-oneiric-amd64/20111115/1/images/iso/somerville-oneiric-amd64-iso-20111115-1.iso'
        """
        return "{}{}{}".format(self.siteurl, self.rootdir, self.imagepath)

    @property
    def imagepath(self):
        if self.ispublished:
            return os.path.join(self.project, 'images', '{}-{}'.format(self.date, self.buildorder), 'iso', self.isoname)
        else:
            return os.path.join(self.project, self.date, self.buildorder, 'images', 'iso', self.isoname)

    @property
    def isoname(self):
        if self.manifest_ver:
            project = self.project + '-' + self.manifest_ver
        else:
            project = self.project
        return '{}-iso-{}-{}.iso'.format(project, self.date, self.buildorder)

    @classmethod
    def from_url(cls, url):
        """
        >>> o = ImageURI.from_url('https://oem-share.canonical.com/oem/cesg-builds/somerville-oneiric-amd64/20111115/1/images/iso/somerville-oneiric-amd64-iso-20111115-1.iso')
        >>> o.project
        'somerville-oneiric-amd64'
        >>> o.date
        '20111115'
        >>> n = ImageURI.from_url('https://oem-share.canonical.com/partners/somerville-oneiric-amd64/images/20111116-1/iso/somerville-oneiric-amd64-iso-20111116-1.iso')
        >>> n.ispublished
        True
        >>> n.project
        'somerville-oneiric-amd64'
        >>> n.ispublished = False
        >>> n.isolink
        'https://oem-share.canonical.com/oem/cesg-builds/somerville-oneiric-amd64/20111116/1/images/iso/somerville-oneiric-amd64-iso-20111116-1.iso'
        >>> n = ImageURI.from_url('https://oem-share.canonical.com/oem/cesg-builds/dell-bto-oneiric-pebble-beach/20111226/0/images/iso/dell-bto-oneiric-pebble-beach-X05-iso-20111226-0.iso')
        >>> n.ispublished = False
        >>> n.date
        '20111226'
        >>> n.project
        'dell-bto-oneiric-pebble-beach'
        >>> n.isoname
        'dell-bto-oneiric-pebble-beach-X05-iso-20111226-0.iso'
        >>> o = ImageURI.from_url('https://oem-share.canonical.com/partners/dell-bto-oneiric-audi-13-intel/images/20120316-3/iso/dell-bto-oneiric-audi-13-intel-A04-iso-20120316-3.iso')
        """
        def _parse(url):
            from urlparse import urlparse
            comps = urlparse(url).path.split('/')
            published = (comps[1] == 'partners')
            if published:
                proj = comps[2]
                (date, buildorder) = comps[4].split('-')
            else:
                (proj, date, buildorder) = (comps[3] , comps[4], comps[5])
            if 'dell-bto' in proj:
                manifest_ver_index = published and 6 or 8
                try:
                    manifest_ver = comps[manifest_ver_index].split('-')[-4]
                except IndexError:
                    logging.error('published:{0} manifest_ver_index:{1}'.format(published, manifest_ver_index))
                    raise IndexError
            else:
                manifest_ver = None
            return (proj, date, buildorder, published, manifest_ver)
        (project, date, buildorder, published, manifest_ver) = _parse(url)
        obj = cls(project, date, buildorder)
        obj.manifest_ver = manifest_ver
        obj.ispublished = published
        return obj

    def topuburi(self):
        obj = copy.copy(self)
        obj.ispublished = True
        return obj

    def tobuilduri(self):
        """
        >>> o = ImageURI.from_url('https://oem-share.canonical.com/partners/somerville-oneiric-amd64/images/20111116-1/iso/somerville-oneiric-amd64-iso-20111116-1.iso')
        >>> n = o.tobuilduri()
        >>> n.ispublished
        False
        >>> n.isolink
        'https://oem-share.canonical.com/oem/cesg-builds/somerville-oneiric-amd64/20111116/1/images/iso/somerville-oneiric-amd64-iso-20111116-1.iso'
        """
        obj = copy.copy(self)
        obj.ispublished = False
        return obj

def __testself():
    import doctest
    doctest.testmod()

class RsyncURI(object):

    def __init__(self, imguri, username=None, siteurl=None):
        self.imguri = imguri
        self.siteurl = siteurl or 'oem-share.canonical.com'
        self.username = username or os.getenv('USER')
        self.rootdir = '/srv/oem-share.canonical.com/www'

    @property
    def isolink(self):
        return '{}@{}:{}'.format(self.username, self.siteurl, self.imagepath)

    @property
    def imagepath(self):
        return self.rootdir + os.path.join(self.imguri.rootdir, self.imguri.imagepath)

    @classmethod
    def from_imguri(cls, imguri):
        """
        >>> imguri = ImageURI.from_url('https://oem-share.canonical.com/partners/somerville-oneiric-amd64/images/20111116-1/iso/somerville-oneiric-amd64-iso-20111116-1.iso')
        >>> nimguri = imguri.tobuilduri()
        >>> rsyncuri = RsyncURI.from_imguri(nimguri)
        >>> rsyncuri.imagepath
        '/srv/oem-share.canonical.com/www/oem/cesg-builds/somerville-oneiric-amd64/20111116/1/images/iso/somerville-oneiric-amd64-iso-20111116-1.iso'
        >>> nimguri = ImageURI.from_url('https://oem-share.canonical.com/oem/cesg-builds/dell-bto-oneiric-pebble-beach/20120330/1/images/iso/dell-bto-oneiric-pebble-beach-A10-iso-20120330-1.iso')
        >>> rsyncuri = RsyncURI.from_imguri(nimguri)
        """
        return cls(imguri)

class _Downloader(object):

    def __init__(self, url):
        """
        >>> o = _Downloader('https://oem-share.canonical.com/partners/somerville-oneiric-amd64/images/20111116-1/iso/somerville-oneiric-amd64-iso-20111116-1.iso')
        Found url is a published iso link, covert it to a link in cesg-build server
        """
        self.imguri = ImageURI.from_url(url)

    def find_lastdownloadediso(self):
        proj_isos = filter(lambda iso: self.imguri.project in iso, glob.glob('*.iso'))
        try:
            return sorted_isos(proj_isos)[-1]
        except IndexError:
            return None

    def run(self):
        self.lastiso = self.find_lastdownloadediso()
        print 'Found last downloaded file:{}'.format(self.lastiso)
        self.isolink = RsyncURI.from_imguri(self.imguri).isolink
        if os.path.exists(self.imguri.isoname):
            sys.exit("Image {} already be downloaded.".format(
                self.imguri.isoname))
        print 'Starting to download file:{}'.format(self.imguri.isoname)
        self.do_download()

class RsyncDownloader(_Downloader):

    def do_download(self):
        filename = self.lastiso and self.lastiso or self.imguri.isoname
        cmd = ['rsync', '-Pv',
               self.isolink,
               filename
        ]

        subprocess.call(cmd)

        if filename != self.imguri.isoname:
            os.rename(filename, self.imguri.isoname)

class ZsyncDownloader(_Downloader):

    def __init__(self, url, auth_token):
        super(ZsyncDownloader, self).__init__(url)
        self.auth_token = auth_token

    def do_download(self):
        cmd = ['zsync_curl',
               self.imguri.isolink + '.zsync',
               '-c pysid=' + self.auth_token
        ]
        if self.lastiso:
            cmd.append('-i ' + self.lastiso)

        subprocess.call(" ".join(cmd), shell=True)

def sorted_isos(isos):
    """
    >>> isos = ['somerville-oneiric-amd64-iso-20111116-1.iso', 'somerville-oneiric-amd64-iso-20111106-1.iso', 'somerville-oneiric-amd64-iso-20091116-3.iso']
    >>> sorted_isos(isos)
    ['somerville-oneiric-amd64-iso-20091116-3.iso', 'somerville-oneiric-amd64-iso-20111106-1.iso', 'somerville-oneiric-amd64-iso-20111116-1.iso']
    >>> isos = ['watauga2-precise-amd64-norecovery-iso-20130121-1.iso', 'watauga2-precise-amd64-norecovery-iso-20130121-0.iso']
    >>> sorted_isos(isos)
    ['watauga2-precise-amd64-norecovery-iso-20130121-0.iso', 'watauga2-precise-amd64-norecovery-iso-20130121-1.iso']
    """
    def _f(e):
        e = e.replace('.iso', '')
        if e.startswith('dell'):
            e = e.replace('dell-bto-oneiric-', '')
            comps = e.split('-iso-')
            comps = comps[1].split('-')
            (date, order) = (comps[0], comps[1])
        else:
            # Date and build number are guaranteed to be the last 2 fields
            # in the name of an ISO produced by Offspring
            comps = e.rsplit('-', 2)
            (date, order) = (comps[1], comps[2])
        return int('{}{}'.format(date, order))
    return sorted(isos, key=_f)

def iso_of_bugdesc(desc):
    """
    >>> iso_of_bugdesc('Image: somerville-oneiric-amd64-20111116-1')
    ('somerville-oneiric-amd64', '20111116', '1')
    """
    import re
    ret = re.findall('Image:\s+((\S+)-(\d+)-(\d)).*', desc)
    if ret:
        return (ret[0][1], ret[0][2], ret[0][3])
    else:
        return ()

def isourl_of_bug(q):
    """
    >>> isourl_of_bug(1100661)
    'https://oem-share.canonical.com/oem/cesg-builds/stella-anaheim-precise-amd64/20130116/0/images/iso/stella-anaheim-precise-amd64-iso-20130116-0.iso'
    """
    from launchpadlib.launchpad import Launchpad
    cachedir = os.path.join(os.environ["HOME"], ".launchpadlib/cache")
    try:
        lp = Launchpad.login_with("oem-getiso", 'production', cachedir)
        found_iso = iso_of_bugdesc(lp.bugs[q].description)
    except KeyboardInterrupt:
        print "Terminated by user reqeust!"
        exit()
    if not found_iso:
        return None
    img = ImageURI(*found_iso)
    # @FIXME: we can not rsync published iso now.
    # img.ispublished = True
    return img.isolink

if __name__ == '__main__':
    usage = "usage: %prog --method [rsync|zsync --auth_token " \
            "<auth_token>] iso_url|bug_number"
    parser = OptionParser(usage=usage)
    parser.add_option(
        "--method", dest="method", default="rsync", metavar="METHOD",
        help="The METHOD of download.  Defaults to 'rsync'.")
    parser.add_option(
        "--auth_token", dest="auth_token", metavar="AUTH_TOKEN",
        help="The authetication token needed to access oem-share.")
    (options, args) = parser.parse_args()

    if __DEBUG__:
        print 'self testing...'
        __testself()
        sys.exit()

    if len(args) != 1:
        sys.exit(parser.get_usage())

    if args[0].isdigit():
        bug = args[0]
        print "find iso link for bug {}".format(bug)
        url = isourl_of_bug(bug)
        if not url:
            sys.exit("Could not find iso link for the bug {}".format(bug))
    else:
        url = args[0]

    if options.method == "rsync":
        try:
            RsyncDownloader(url).run()
        except KeyboardInterrupt:
            sys.exit()
    elif options.method == "zsync":
        if options.auth_token is None:
            sys.exit(parser.get_usage())
        if not os.path.exists("/usr/bin/zsync_curl"):
            sys.exit(
                "The zync-curl package must be installed to use this method.")
        try:
            ZsyncDownloader(url, options.auth_token).run()
        except KeyboardInterrupt:
            sys.exit()
    else:
        sys.exit(parser.get_usage())
