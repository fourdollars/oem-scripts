#!/usr/bin/env python

import sys
import getpass
import mechanize


def get_browser():
    """
    Return a mechanize.Browser configured appropriately.
    """
    browser = mechanize.Browser()
    browser.set_handle_robots(False)
    return browser


def prompt_for_credentials():
    """
    Return username and password collected from stdin.
    """
    print >> sys.stderr, "\rUsername: ",
    username = raw_input()
    password = getpass.getpass()
    return username, password


def prompt_for_code():
    """
    Return code collected from stdin.
    """
    print >> sys.stderr, "\rCode: ",
    return raw_input()


def get_session_cookie(browser=get_browser()):
    """
    Fetch initial url, login with the supplied credentials, and return the
    session id for the authenticated session.
    """
    bad_creds = False
    bad_code = False

    print >> sys.stderr, "Authenticating with Ubuntu SSO..."
    browser.open("https://oem-share.canonical.com/oem/cesg-builds/")
    # apachd2-openid
    browser.select_form("oid_form")
    browser.submit()
    browser.select_form(nr=0)
    browser.submit()
    # Ubuntu SSO, approve sending team info
    while True:
        try:
            browser.select_form("decideform")
            browser.submit()
        except mechanize.FormNotFoundError:
            browser.select_form("loginform")
            try:
                browser.form.find_control("oath_token")
            except mechanize.ControlNotFoundError:
                if bad_creds:
                    print >> sys.stderr, "\rBad credentials"
                bad_creds = True
                username, password = prompt_for_credentials()
                browser["email"] = username
                browser["password"] = password
                browser.submit()
            else:
                if bad_code:
                    print >> sys.stderr, "\rBad code"
                bad_code = True
                code = prompt_for_code()
                browser["oath_token"] = code
                browser.submit()
        else:
            break
    # Get session id from cookiejar
    cookiejar = browser._ua_handlers["_cookies"].cookiejar
    oemshare_cookies = cookiejar._cookies["oem-share.canonical.com"]
    return oemshare_cookies["/"]["pysid"].value


def main():
    print get_session_cookie()


if __name__ == "__main__":
    main()
