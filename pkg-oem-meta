#! /usr/bin/env python3

import argparse
import lsb_release
import os
import re
import subprocess
import sys

from distro_info import UbuntuDistroInfo
from time import localtime, strftime

program_name = os.path.basename(sys.argv[0])

if program_name == 'pkg-somerville-meta':
    codename = 'somerville'
    Codename = codename.title()
    brand = 'dell'
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=f"{Codename} platform meta package generator.",
        epilog=f"Ex. {program_name} --public-bug 1868254 -s focal -k"
        " oem -p three-eyed-raven 0962")
elif program_name == 'pkg-stella-meta':
    codename = 'stella'
    Codename = codename.title()
    brand = 'hp'
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=f"{Codename} platform meta package generator.",
        epilog=f"Ex. {program_name} -s focal -k oem"
        " -g cmit -p beedrill 8594")
elif program_name == 'pkg-sutton-meta':
    codename = 'sutton'
    Codename = codename.title()
    brand = 'lenovo'
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=f"{Codename} platform meta package generator.",
        epilog=f"Ex. {program_name} -s focal -k oem"
        " -g bachman -p banaing S08")
else:
    raise Exception('This program can not be executed.')

parser.add_argument('-k', '--kernel',
                    choices=['oem', 'default'],
                    default='oem',
                    help="Using different kernel flavour. [oem|default]\n"
                    "'oem' is for linux-oem-20.04.\n"
                    "'default' is for linux-generic-hwe-20.04.")
info = UbuntuDistroInfo()
try:
    # for bionic
    series = lsb_release.get_lsb_information()['CODENAME']
except AttributeError as e:
    # for focal
    series = lsb_release.get_os_release()['CODENAME']

parser.add_argument('-s', '--series', choices=info.supported(), default=series,
                    help=f"Ubuntu series, such as {series} by default.")
parser.add_argument('--public-bug',
                    help="Launchpad public bug number.",
                    type=int)
parser.add_argument('--private-bug',
                    help="Launchpad private bug number.",
                    type=int)

if codename == 'somerville':
    parser.add_argument('bios_id', nargs='+', help="BIOS ID")
    parser.add_argument('-p', '--platform', help="platform tag", required=True)
elif codename == 'stella':
    parser.add_argument('-g', '--group', help="OEM-group", required=True)
    parser.add_argument('-p', '--platform', help="platform-codename",
                        required=True)
    parser.add_argument('sd_id', nargs='+',
                        help="subsystem device ID, such as 0962")
elif codename == 'sutton':
    parser.add_argument('-g', '--group', help="OEM-group", required=True)
    parser.add_argument('-p', '--platform', help="platform-codename",
                        required=True)
    parser.add_argument('bios_ver', nargs='+',
                        help="First three chars in bios version, "
                        + "such as S08 or bvnLENOVO:bvrS08")
args = parser.parse_args()

platform = args.platform.lower()
Platform = platform.title()
series = args.series
versions = dict(zip(info.get_all(result='codename'),
                    info.get_all(result='release')))
version = versions[series].split(' ')[0]

# Sanity check
if codename == 'somerville':
    group = ''
    if args.platform.startswith("fossa-"):
        raise Exception('Please remove fossa- prefix from the platform name.')
    for bios_id in args.bios_id:
        if not re.match('[0-9a-fA-F]{4}$', bios_id):
            raise Exception('Invalid BIOS ID: {%s}' % bios_id)
    meta = 'oem-' + codename + '-' + platform + '-meta'
elif codename == 'stella':
    group = args.group.lower()
    for sd_id in args.sd_id:
        if not re.match('[0-9a-fA-F]{4}$', sd_id):
            raise Exception('Invalid subsystem device ID: {%s}' % sd_id)
    meta = 'oem-' + codename + '.' + group + '-' + platform + '-meta'
    Codename = Codename + ' ' + group.title()
elif codename == 'sutton':
    group = args.group.lower()
    for bios_ver in args.bios_ver:
        if (not re.match('[0-9a-zA-Z]{3}$', bios_ver)) and \
           (not re.match('bvn[0-9a-zA-Z]+:bvr[0-9a-zA-Z]{3}$', bios_ver)):
            raise Exception('Invalid BIOS version: {%s}' % bios_ver)
    meta = 'oem-' + codename + '.' + group + '-' + platform + '-meta'
    Codename = Codename + ' ' + group.title()

if os.path.exists(meta):
    raise Exception(meta + ' already exists. Please remove or rename it.')

os.mkdir(meta)
os.chdir(meta)

PREFIX = '~oem-solutions-engineers'
git_repo = PREFIX + '/pc-enablement/+git/oem-' + codename + '-projects-meta'


def generate_debian_package(version, dummy=False, real=False):
    extra = ''
    if args.kernel == 'default':
        if real:
            extra = ', linux-generic-hwe-20.04'
        flavour = 'default'
    elif args.kernel == 'oem':
        if real:
            extra = ', linux-oem-20.04'
        flavour = 'oem'

    if group:
        prefix = group + '.'
        infix = '.' + group
        platform_archive = codename + infix
    else:
        prefix = ''
        infix = ''
        platform_archive = codename + '-' + platform

    if dummy:
        version = version + "~ubuntu1"
        branch = prefix + platform + '-' + series + '-ubuntu'
        if args.public_bug:
            lp_bug = f" (LP: #{args.public_bug})"
        else:
            lp_bug = ""

    if real:
        version = version + "ubuntu1"
        factory = 'oem-' + codename + infix + '-factory-' + platform + '-meta'
        factory_depends = ''
        branch = prefix + platform + '-' + series + '-oem'
        if args.private_bug:
            lp_bug = f" (LP: #{args.private_bug})"
        else:
            lp_bug = ""
        if codename == 'somerville':
            extra = extra + ', oem-somerville-meta'
            factory_depends = factory_depends + ', oem-somerville-factory-meta'
        if codename == 'sutton':
            extra = extra + ', oem-' + platform_archive + '-meta'
            factory_depends = factory_depends + ', oem-' + platform_archive + '-factory-meta'

    git_abbr = f"https://git.launchpad.net/{git_repo} -b {branch}"
    git_browser = f"https://code.launchpad.net/{git_repo}/+ref/{branch}"

    subprocess.run(['git', 'checkout', '--orphan', branch])

    source_file = "oem-%s-%s-meta.list" % (codename + infix, platform)
    archive = 'archive.canonical.com'
    source_list = f"""\
deb http://{brand}.{archive}/ {series} {codename}
# deb-src http://{brand}.{archive}/ {series} {codename}
deb http://{brand}.{archive}/ {series} {platform_archive}
# deb-src http://{brand}.{archive}/ {series} {platform_archive}
"""

    with open(source_file, 'w') as f:
        f.write(source_list)

    if not os.path.exists('debian'):
        os.mkdir('debian')
    os.chdir('debian')

    gbp_conf = f"""[DEFAULT]
pristine-tar = False

[buildpackage]
debian-branch={branch}
"""
    with open('gbp.conf', 'w') as f:
        f.write(gbp_conf)

    fullname = os.getenv('DEBFULLNAME', 'Commercial Engineering')
    email = os.getenv('DEBEMAIL', 'commercial-engineering@canonical.com')
    timestamp = strftime("%a, %d %b %Y %H:%M:%S %z", localtime())

    with open('changelog', 'w') as f:
        f.write(f"""{meta} ({version}) {series}; urgency=medium

  * Meta package for {Codename} {Platform}.{lp_bug}

 -- {fullname} <{email}>  {timestamp}
""")

    with open('control', 'w') as f:
        f.write(f"""Source: {meta}
Section: misc
Priority: optional
Maintainer: Commercial Engineering <commercial-engineering@canonical.com>
Build-Depends: debhelper-compat (= 12), dh-modaliases
Standards-Version: 4.5.0
Vcs-Git: {git_abbr}
Vcs-Browser: {git_browser}

Package: {meta}
Architecture: all
Depends: ${{misc:Depends}}, ubuntu-oem-keyring{extra}
XB-Modaliases: ${{modaliases}}
XB-Ubuntu-OEM-Kernel-Flavour: {flavour}
Description: hardware support for {Codename} {Platform} platform
 This is a metapackage for {Codename} {Platform} platform. It installs\n"""
                + " packages needed to support this hardware fully.\n")
        if real:
            f.write(f"""\nPackage: {factory}
Architecture: all
Depends: ${{misc:Depends}}{factory_depends}
Description: hardware support for {Codename} {Platform} platform (factory)
 This is a factory metapackage for {Codename} {Platform} platform.\n"""
                    + " It installs packages needed to support this hardware "
                    + "fully. (factory)\n")

    timestamp = strftime("%Y", localtime())

    with open('copyright', 'w') as f:
        f.write('Format: https://www.debian.org/doc/packaging-manuals/'
                'copyright-format/1.0/\n'
                f'Upstream-Name: {meta}\n'
                f'Source: {git_browser}\n\n'
                f"""Files: *
Copyright: {timestamp} Canonical Limited
License: GPL-3
 This package is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; version 3 of the License only.
 .
 This package is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>
 .
 On Debian systems, the complete text of the GNU General
 Public License version 3 can be found in "/usr/share/common-licenses/GPL-3".
""")

    with open('install', 'w') as f:
        f.write("%s /etc/apt/sources.list.d/\n" % (source_file))

    with open('modaliases', 'w') as f:
        if 'bios_id' in vars(args).keys():
            for bios_id in args.bios_id:
                f.write("alias pci:*sv00001028sd0000{0}* meta {1}\n"
                        .format(bios_id.upper(), meta))
        elif 'sd_id' in vars(args).keys():
            for sd_id in args.sd_id:
                f.write("alias pci:*sv0000103Csd0000{0}* meta {1}\n"
                        .format(sd_id.upper(), meta))
        elif 'bios_ver' in vars(args).keys():
            for bios_ver in args.bios_ver:
                result = re.match('([0-9a-zA-Z]{3})$', bios_ver)
                if result is None:
                    result = re.match('bvn([0-9a-zA-Z]+):bvr([0-9a-zA-Z]{3})$',
                                      bios_ver)
                    if result is None:
                        continue
                    else:
                        bios_vendor = result.group(1).upper()
                        bios_ids = result.group(2).upper()
                else:
                    # Set the default bios vendor for Lenovo
                    bios_vendor = 'LENOVO'
                    bios_ids = result.group().upper()

                f.write("alias dmi:*bvn{0}:bvr{1}* meta {2}\n"
                        .format(bios_vendor, bios_ids, meta))

    with open('rules', 'w') as f:
        f.write("""#!/usr/bin/make -f
# -*- makefile -*-

export DH_VERBOSE=1

%:
\tdh $@ --with modaliases\n""")

    os.chmod('rules', 0o755)

    if not os.path.exists('source'):
        os.mkdir('source')
    os.chdir('source')

    with open('format', 'w') as f:
        f.write("3.0 (native)\n")

    os.chdir('..')

    if not os.path.exists('tests'):
        os.mkdir('tests')
    os.chdir('tests')
    with open('control', 'w') as f:
        f.write(f"""Tests: {meta}
Depends: @
Restrictions: needs-root
""")
    with open(meta, 'w') as f:
        f.write(f"""#!/bin/bash

exec 2>&1
set -euo pipefail
IFS=$'\\n\\t'

apt-get update
apt-get full-upgrade --yes

apt-get update
apt-get full-upgrade --yes

apt-get autoremove --purge --yes {meta}
""")
    os.chdir('..')

    os.chdir('..')
    subprocess.run(['git', 'add', '.'])
    subprocess.run(['git', 'config', 'user.name', fullname])
    subprocess.run(['git', 'config', 'user.email', email])
    subprocess.run(['debcommit', '-a', '-R', '-r'])


subprocess.run(['git', 'init'])
generate_debian_package(version, dummy=True)
generate_debian_package(version, real=True)

subprocess.run(['git', 'remote', 'add', 'origin',
                f'lp:{git_repo}'])

print(f"'{meta}' is ready.")
