#!/usr/bin/env python3

import sys
import getpass
import mechanize
import argparse


class RetryLimitExceed(Exception):
    pass


def get_browser():
    """
    Return a mechanize.Browser configured appropriately.
    """
    browser = mechanize.Browser()
    browser.set_handle_robots(False)
    return browser


def prompt_for_credentials():
    """
    Return username and password collected from stdin.
    """
    print("\rEmail: ", file=sys.stderr, end='')
    username = input()
    password = getpass.getpass(stream=sys.stderr)
    return username, password


def prompt_for_password():
    """
    Return password from stdin
    """
    password = getpass.getpass(stream=sys.stderr)
    return password


def prompt_for_code():
    """
    Return code collected from stdin.
    """
    print("\r2FA Code: ", file=sys.stderr, end='')
    return input()


def get_session_cookie(browser=get_browser(), args=None):
    """
    Fetch initial url, login with the supplied credentials, and return the
    session id for the authenticated session.
    """

    prop = {
        'oem-ibs': {
            "name": "oem-ibs.canonical.com",
            "url": "https://oem-ibs.canonical.com/builds/",
            "session": "sessionid"},
        'oem-share': {
            "name": "oem-share.canonical.com",
            "url": "https://oem-share.canonical.com/oem/cesg-builds/",
            "session": "pysid"}
    }

    bad_creds = False
    bad_code = False

    retry = args.retry
    username = args.username
    password = args.password
    code = args.code

    if args.server is None or args.server not in prop:
        print("Unsuppoted server %s" % args.server, file=sys.stderr)
        return
    server = prop[args.server]

    print("Authenticating %s with Ubuntu SSO..." % args.server,
          file=sys.stderr)
    browser.open(server["url"])
    # apachd2-openid
    try:
        browser.select_form("oid_form")
        browser.submit()
    except mechanize.FormNotFoundError:
        browser.select_form(nr=0)
        browser.submit()
    browser.select_form(nr=0)
    browser.submit()
    # Ubuntu SSO, approve sending team info
    while True:
        try:
            browser.select_form("decideform")
            browser.submit()
        except mechanize.FormNotFoundError:
            browser.select_form("loginform")
            try:
                browser.form.find_control("oath_token")
            except mechanize.ControlNotFoundError:
                if bad_creds:
                    print("\rBad credentials", file=sys.stderr)
                    """ clean credentials """
                    username = None
                    password = None
                    retry -= 1
                    if retry == 0:
                        raise RetryLimitExceed()
                bad_creds = True

                while True:
                    if username is None:
                        username, password = prompt_for_credentials()
                        browser["email"] = username
                        browser["password"] = password
                        break

                    browser["email"] = username
                    if password is None:
                        browser["password"] = prompt_for_password()
                        break

                    browser["password"] = password
                    break

                browser.submit()
            else:
                if bad_code:
                    print("\rBad code", file=sys.stderr)
                bad_code = True

                if code is None:
                    code = prompt_for_code()

                browser["oath_token"] = code
                browser.submit()
        else:
            break

    # Get session id from cookiejar
    cookiejar = browser._ua_handlers["_cookies"].cookiejar
    cookies = cookiejar._cookies[server["name"]]
    return cookies["/"][server["session"]].value


def main():
    parser = argparse.ArgumentParser(
        description='Retrieve Canonical internal websites session ID',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("server",
                        help="Specify server identifier [oem-ibs|oem-share]")
    parser.add_argument("-u", "--username", help="Specify user's email")
    parser.add_argument("-p", "--password", help="Specify password")
    parser.add_argument("-c", "--code", help="Specify 2-factor code")
    parser.add_argument("-r", "--retry", help="Sepcify authentication retry",
                        type=int, default=3)
    args = parser.parse_args()
    result = 1
    try:
        session = get_session_cookie(args=args)
        if session is not None:
            result = 0
            print(session)
    except RetryLimitExceed:
        pass
    except KeyboardInterrupt:
        print("\rterminate", file=sys.stderr)
    except Exception as e:
        print("\rUnknown error %s" % str(e), file=sys.stderr)

    return result


if __name__ == "__main__":
    sys.exit(main())
