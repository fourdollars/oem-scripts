#!/bin/bash
# https://help.launchpad.net/API/SigningRequests
# https://api.launchpad.net/
# Usage:
#  launchpad-api get devel/people/+me
#  launchpad-api get devel/people/+me ws.op==getArchiveSubscriptionURLs
# NOTE:
# When it return "HTTP/1.1 401 Unauthorized" and no URL just show "You need to be logged in to view this URL."
# Please remove the config.ini and try again.
# $ rm ~/.config/oem-scripts/config.ini

oauth_consumer_key=${oauth_consumer_key:="System-wide: $(lsb_release -is) (oem-scripts $(hostname))"}

# shellcheck source=config.sh
source /usr/share/oem-scripts/config.sh 2>/dev/null || source config.sh

http_file=$(command -v http)
if [ "${http_file}" = "" ] || [ ! -x "${http_file}" ]; then
    echo "Please install \`httpie\` package!"
    exit 1
fi

LAUNCHPAD_URL="${LAUNCHPAD_URL:=https://launchpad.net}"
LAUNCHPAD_API="${LAUNCHPAD_API:=https://api.launchpad.net/}"

get_token()
{
    [ "x$debug" = "x1" ] && echo "oauth_consumer_key=${oauth_consumer_key}"

    oauth=$(http --ignore-stdin --form post ${LAUNCHPAD_URL}/+request-token oauth_consumer_key="$oauth_consumer_key" oauth_signature_method=PLAINTEXT oauth_signature="&")
    [ "x$debug" = "x1" ] && echo "$oauth"

    eval "${oauth/&*/}"
    [ "x$debug" = "x1" ] && echo "oauth_token=${oauth_token:=}"

    eval "${oauth/*&/}"
    [ "x$debug" = "x1" ] && echo "oauth_token_secret=${oauth_token_secret:=}"

    echo "Please open ${LAUNCHPAD_URL}/+authorize-token?oauth_token=$oauth_token&allow_permission=DESKTOP_INTEGRATION to authorize the token."

    while :; do
        body=$(http --ignore-stdin --form post ${LAUNCHPAD_URL}/+access-token oauth_token="$oauth_token" oauth_consumer_key="$oauth_consumer_key" oauth_signature_method=PLAINTEXT oauth_signature="&$oauth_token_secret")
        if [ "$body" = "Request token has not yet been reviewed. Try again later." ]; then
            sleep 5
        elif [ "$body" = "Invalid OAuth signature." ]; then
            break
        else
            [ "x$debug" = "x1" ] && echo "$body"
            oauth=${body/&lp.context=*/}
            eval "${oauth/&*/}"
            [ "x$debug" = "x1" ] && echo "oauth_token=${oauth_token}"

            eval "${oauth/*&/}"
            [ "x$debug" = "x1" ] && echo "oauth_token_secret=${oauth_token_secret}"
            break
        fi
    done
}

parse_api()
{
    if [ -z "$1" ]; then
        return
    fi
    case "$1" in
        (${LAUNCHPAD_API}*)
            echo "$1"
            ;;
        (devel/*)
            echo "${LAUNCHPAD_API}$1"
            ;;
        (/devel/*)
            echo "${LAUNCHPAD_API}${1:1}"
            ;;
        (/*)
            echo "${LAUNCHPAD_API}devel$1"
            ;;
        (*)
            echo "${LAUNCHPAD_API}devel/$1"
            ;;
    esac
}

get_api()
{
    api=$(parse_api "$1")
    if [ -z "$api" ]; then
        return
    fi
    shift
    http --check-status --ignore-stdin --follow GET "$api" \
        'OAuth realm'=="${LAUNCHPAD_API}" \
        oauth_consumer_key=="${oauth_consumer_key}" \
        oauth_nonce=="$(date +%s)" \
        oauth_signature=="&${oauth_token_secret}" \
        oauth_signature_method=="PLAINTEXT" \
        oauth_timestamp=="$(date +%s)" \
        oauth_token=="${oauth_token}" \
        oauth_version=="1.0" \
        "$@"
}

post_api()
{
    api=$(parse_api "$1")
    if [ -z "$api" ]; then
        return
    fi
    shift
    http --check-status --ignore-stdin --form POST "$api" \
        'OAuth realm'="${LAUNCHPAD_API}/" \
        oauth_consumer_key="${oauth_consumer_key}" \
        oauth_nonce="$(date +%s)" \
        oauth_signature="&${oauth_token_secret}" \
        oauth_signature_method="PLAINTEXT" \
        oauth_timestamp="$(date +%s)" \
        oauth_token="${oauth_token}" \
        oauth_version="1.0" \
        "$@"
}


if [ -n "$LAUNCHPAD_TOKEN" ]; then
    read -r oauth_token oauth_token_secret oauth_consumer_key < <(echo "$LAUNCHPAD_TOKEN" | tr ':' ' ')
    if [ -z "$oauth_consumer_key" ]; then
        oauth_consumer_key="System-wide: $(lsb_release -is) (oem-scripts $(hostname))"
    else
        oauth_consumer_key="${oauth_consumer_key/System-wide /System-wide:}"
    fi
elif valid_oem_scripts_config; then
    oauth_token=$(read_oem_scripts_config oauth_token)
    oauth_token_secret=$(read_oem_scripts_config oauth_token_secret)
    oauth_consumer_key=$(read_oem_scripts_config oauth_consumer_key)
else
    get_token
    write_oem_scripts_config oauth_token "${oauth_token}"
    write_oem_scripts_config oauth_token_secret "${oauth_token_secret}"
    write_oem_scripts_config oauth_consumer_key "${oauth_consumer_key}"
fi

case "$1" in
    ("get"|"GET")
        shift
        get_api "$@"
        ;;
    ("post"|"POST")
        shift
        post_api "$@"
        ;;
    ("debug")
        debug=1
        get_api devel/people/+me
        ;;
    (*)
        ;;
esac
