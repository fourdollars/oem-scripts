#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

export LAUNCHPAD_API="https://api.staging.launchpad.net/"

# Change the working folder to avoid reading the template files under the source code folder.
cd /tmp

cat > fossa-varys.json <<ENDLINE
{
  "group": "",
  "platform": "varys",
  "productnames": [
    "Precision 5550"
  ],
  "project": "somerville"
}
ENDLINE

cleanup() {
    echo "= cleanup ="
    if [ -f "bugid" ]; then
        BUG_ID=$(cat bugid)
        rm bugid
    fi
    if [ -f "$BUG_ID.json" ]; then
        jq -C -S < "$BUG_ID.json"
        rm "$BUG_ID.json"
        lp-bug cleanup --yes "$BUG_ID"
    fi
}

trap cleanup EXIT INT TERM

bootstrap-meta create-sru-bug fossa-varys.json --kernel linux-oem-20.04 --output bugid
BUG_ID=$(cat bugid)
launchpad-api get "bugs/$BUG_ID" > "$BUG_ID.json"
jq -r .description < "$BUG_ID.json" | grep "Precision 5550"
jq -r .description < "$BUG_ID.json" | grep linux-oem-20.04
jq -r '.tags|join(" ")' < "$BUG_ID.json" | grep oem-meta-packages

if bootstrap-meta create-sru-bug fossa-varys.json --kernel linux-oem-20.04 --output bugid; then
    echo "It is expected to return failed."
    exit 1
fi

bootstrap-meta update-sru-bug fossa-varys.json --kernel linux-oem-20.04b --yes
launchpad-api get "bugs/$BUG_ID" > "$BUG_ID.json"
jq -r .description < "$BUG_ID.json" | grep linux-oem-20.04b

bootstrap-meta update-sru-bug fossa-varys.json --kernel linux-oem-20.04c --yes --ready
launchpad-api get "bugs/$BUG_ID" > "$BUG_ID.json"
jq -r .description < "$BUG_ID.json" | grep linux-oem-20.04c
jq -r '.tags|join(" ")' < "$BUG_ID.json" | grep oem-needs-upload

bootstrap-meta update-sru-bug fossa-varys.json --kernel linux-oem-20.04d --yes --release
launchpad-api get "bugs/$BUG_ID" > "$BUG_ID.json"
jq -r .description < "$BUG_ID.json" | grep linux-oem-20.04d
jq -r '.tags|join(" ")' < "$BUG_ID.json" | grep oem-done-upload

if bootstrap-meta update-sru-git fossa-varys.json --kernel linux-oem-20.04d --yes --dryrun; then
    echo "It is expected to return failed."
    exit 1
fi
