#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

export LAUNCHPAD_API="https://api.staging.launchpad.net/"

export COPYRIGHT_YEAR=2022
ERR=0

cleanup() {
    echo "= cleanup ="
    if [ -f "bug_id" ]; then
        BUG_ID=$(cat bug_id)
        rm bug_id
        lp-bug cleanup --yes "$BUG_ID"
    fi
}

trap cleanup EXIT INT TERM

# create
mir-bug create -o bug_id somerville bronn "some Dell platforms" --series focal
BUG_ID=$(cat bug_id)
lp-api get bugs/"$BUG_ID" > "$AUTOPKGTEST_ARTIFACTS/$BUG_ID.json"
jq -r .title < "$AUTOPKGTEST_ARTIFACTS/$BUG_ID.json" | grep "\[MIR\] oem-somerville-bronn-meta"
jq -r .description < "$AUTOPKGTEST_ARTIFACTS/$BUG_ID.json" | grep focal
jq -r .description < "$AUTOPKGTEST_ARTIFACTS/$BUG_ID.json" | grep 20.04
lp-bug cleanup --yes "$BUG_ID"
rm bug_id

mir-bug create -o bug_id somerville tentacool "some Dell platforms" --series jammy
BUG_ID=$(cat bug_id)
lp-api get bugs/"$BUG_ID" > "$AUTOPKGTEST_ARTIFACTS/$BUG_ID.json"
jq -r .title < "$AUTOPKGTEST_ARTIFACTS/$BUG_ID.json" | grep "\[MIR\]\[jammy\] oem-somerville-tentacool-meta"
jq -r .description < "$AUTOPKGTEST_ARTIFACTS/$BUG_ID.json" | grep jammy
jq -r .description < "$AUTOPKGTEST_ARTIFACTS/$BUG_ID.json" | grep 22.04

# check/update
cat > "$AUTOPKGTEST_ARTIFACTS"/jellyfish-tentacool.json <<ENDLINE
{
  "certification-hardware": [
    "202112-29761",
    "202112-29762",
    "202112-29763",
    "202112-29800",
    "202112-29801",
    "202112-29802"
  ],
  "certified": true,
  "certify-planning": [
    1965841
  ],
  "metabug": 1968569,
  "mirbug": $BUG_ID,
  "platform": "tentacool",
  "productnames": [
    "XPS 13 9320"
  ],
  "project": "somerville",
  "series": "jammy",
  "short_description": "XPS 13 9320"
}
ENDLINE

mir-bug update --yes --skip "$AUTOPKGTEST_ARTIFACTS"/jellyfish-tentacool.json
payload=$(lp-api get bugs/"$BUG_ID")
for link in $(lp-api .subscriptions_collection_link <<< "$payload" | jq -r '.entries|.[]|.self_link'); do
    case "$(basename "$link")" in
        (ubuntu-sponsors|ubuntu-desktop|ubuntu-archive)
            echo "FAIL: '$link' shall not be subscribed by 'mir-bug update --yes --skip'."
            ERR=1
            ;;
    esac
done
mir-bug update --yes --skip --ready "$AUTOPKGTEST_ARTIFACTS"/jellyfish-tentacool.json
payload=$(lp-api get bugs/"$BUG_ID")
for link in $(lp-api .subscriptions_collection_link <<< "$payload" | jq -r '.entries|.[]|.self_link'); do
    case "$(basename "$link")" in
        (ubuntu-sponsors|ubuntu-desktop|ubuntu-archive)
            echo "FAIL: '$link' shall not be subscribed by 'mir-bug update --yes --skip --ready'."
            ERR=1
            ;;
    esac
done
mir-bug update --yes --skip --ready --release "$AUTOPKGTEST_ARTIFACTS"/jellyfish-tentacool.json
mir-bug check --skip --ready --release "$AUTOPKGTEST_ARTIFACTS"/jellyfish-tentacool.json
mir-bug update --yes --skip --tz=UTC --ready --release "$AUTOPKGTEST_ARTIFACTS"/jellyfish-tentacool.json
mir-bug check --skip --tz=UTC --ready --release "$AUTOPKGTEST_ARTIFACTS"/jellyfish-tentacool.json

# collect
mir-bug collect "$AUTOPKGTEST_ARTIFACTS"/oem-meta-mir-bugs.json
mir-bug collect --ubuntu-certified "$AUTOPKGTEST_ARTIFACTS"/oem-meta-mir-bugs-ubuntu-certified.json

exit "$ERR"
