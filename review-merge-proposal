#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2021  Canonical Ltd.
# Author: Shih-Yuan Lee (FourDollars) <sylee@canonical.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import argparse
from oem_scripts.LaunchpadLogin import LaunchpadLogin

parser = argparse.ArgumentParser()
parser.add_argument(
    "link", help="Specify the link of the merge proposal on Launchpad.", type=str
)
parser.add_argument(
    "--minimal-approved-number",
    help="Specify the minimal approved number that the merge proposal needs.",
    type=int,
)
args = parser.parse_args()

link = args.link.replace("code.launchpad.net", "api.launchpad.net/devel")
if not link.startswith("https://api.launchpad.net/devel/"):
    print(f"{link} is a wrong link.")
    exit(1)

login = LaunchpadLogin()
lp = login.lp
proposal = lp.load(link)
if (
    proposal.resource_type_link
    != "https://api.launchpad.net/devel/#branch_merge_proposal"
):
    print(f"{link} is not a https://api.launchpad.net/devel/#branch_merge_proposal.")
    exit(1)

if proposal.queue_status != "Needs review":
    print(f"{link} is not in 'Needs review' status yet.")
    exit(1)

if (
    proposal.source_git_repository.owner
    not in proposal.target_git_repository.owner.members
):
    print(
        f"The owner of {link} doesn't belong to the target git repo's owner's members."
    )
    exit(1)

all_approved = True
one_approved = False
number = 0

print(f"Checking {proposal.web_link} ...")

for vote in proposal.votes:
    display_name = vote.reviewer.display_name
    if vote.reviewer not in proposal.target_git_repository.owner.members:
        print(f"Ignore '{display_name}' because it is not a member.")
        continue
    if vote.is_pending:
        all_approved = False
        print(f"'{display_name}' didn't approve it yet.")
    else:
        one_approved = True
        number += 1
        print(f"'{display_name}' has approved it.")

if not one_approved:
    exit(1)

if args.minimal_approved_number is None:
    if all_approved:
        exit(0)
else:
    if number >= args.minimal_approved_number:
        exit(0)

exit(1)
