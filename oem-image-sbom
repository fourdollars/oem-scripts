#!/usr/bin/env python3
# Copyright (C) 2024  Canonical Ltd.
# Author: Shih-Yuan Lee (FourDollars) <sylee@canonical.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import argparse
import yaml
from apt import apt_pkg


def get_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="Generate/Compare SBOM from manifest")
    parser.add_argument(
        "manifest",
        help="Path to manifest file",
        type=str,
        action="extend",
        nargs="+",
    )
    return parser


def get_sbom(filename) -> dict:
    sbom = {}

    with open(filename, "r") as f:
        manifest = yaml.safe_load(f)

    for path in manifest.get("deb", None):
        name = path.split("/")[-1]
        pkg = name.split("_")[0]
        if " " in pkg:
            pkg = pkg.split(" ")[0]
        src = manifest["deb"][path]["source"]
        ver = manifest["deb"][path]["version"]
        deb = sbom.get(src, None)
        if deb is None:
            sbom[src] = {
                "version": ver,
                "packages": [pkg],
            }
        else:
            if apt_pkg.version_compare(deb["version"], ver) < 0:
                deb["version"] = ver
            if pkg not in deb["packages"]:
                deb["packages"].append(pkg)
                deb["packages"].sort()
    for squashfs in manifest.get("squashfs", None):
        for pkg, fields in manifest["squashfs"][squashfs]["manifest"].items():
            if pkg.startswith("snap:"):
                snap = sbom.get(pkg, None)
                rev = fields.get("revision", None)
                trk = fields.get("tracking", None)
                ver = fields.get("version", None)
                if snap is None:
                    sbom[pkg] = {
                        "revision": rev,
                        "tracking": trk,
                        "version": ver,
                    }
                else:
                    if rev > snap["revision"]:
                        snap["revision"] = rev
                        snap["version"] = ver
                        snap["tracking"] = trk
                    elif ver > snap["version"]:
                        snap["revision"] = rev
                        snap["version"] = ver
                        snap["tracking"] = trk
                continue
            if "'" in pkg:
                pkg.replace("'", "")
            if pkg.startswith("-"):
                pkg = pkg[1:]
            if pkg.endswith(":amd64"):
                pkg = pkg[:-6]
            if "source" not in fields:
                continue
            src = fields["source"]
            ver = fields["version"]
            deb = sbom.get(src, None)
            if deb is None:
                sbom[src] = {
                    "version": ver,
                    "packages": [pkg],
                }
            else:
                if apt_pkg.version_compare(deb["version"], ver) < 0:
                    deb["version"] = ver
                if pkg not in deb["packages"]:
                    deb["packages"].append(pkg)
                    deb["packages"].sort()
    return sbom


def compare_sbom(first, second):
    add = {}
    remove = {}
    change = {}

    for pkg, fields in first.items():
        if pkg not in second:
            remove[pkg] = {"version": fields["version"]}
            if pkg.startswith("snap:"):
                for field in ("revision", "tracking"):
                    if field in fields:
                        remove[pkg][field] = fields[field]
        else:
            ret = apt_pkg.version_compare(fields["version"], second[pkg]["version"])
            if ret < 0:
                change[pkg] = {
                    "version": f"{fields['version']} -> {second[pkg]['version']}"
                }
            elif ret > 0:
                change[pkg] = {
                    "version": f"{fields['version']} -> {second[pkg]['version']} (WARNING)"
                }
            if ret != 0 and pkg.startswith("snap:"):
                for field in ("revision", "tracking"):
                    if field in fields:
                        if fields[field] != second[pkg][field]:
                            change[pkg][
                                field
                            ] = f"{fields[field]} -> {second[pkg][field]}"
                        else:
                            change[pkg][field] = fields[field]
    for pkg, fields in second.items():
        if pkg not in first:
            add[pkg] = {"version": fields["version"]}
            if pkg.startswith("snap:"):
                for field in ("revision", "tracking"):
                    if field in fields:
                        add[pkg][field] = fields[field]

    diff = {}
    if add:
        diff["ADD"] = add
    if remove:
        diff["REMOVE"] = remove
    if change:
        diff["CHANGE"] = change

    return diff


if __name__ == "__main__":
    parser = get_parser()
    args = parser.parse_args()
    if len(args.manifest) == 1 and args.manifest[0].endswith(".manifest"):
        sbom = get_sbom(args.manifest[0])
        print(yaml.dump(sbom))
    elif len(args.manifest) == 2:
        first = args.manifest[0]
        second = args.manifest[1]
        if first.endswith(".sbom"):
            with open(first, "r") as f:
                first = yaml.safe_load(f)
        elif first.endswith(".manifest"):
            first = get_sbom(first)
        else:
            parser.print_help()
            exit(1)
        if second.endswith(".sbom"):
            with open(second, "r") as f:
                second = yaml.safe_load(f)
        elif second.endswith(".manifest"):
            second = get_sbom(second)
        else:
            parser.print_help()
            exit(1)
        diff = compare_sbom(first, second)
        print(yaml.dump(diff))
    else:
        parser.print_help()
        exit(1)
